DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST: [my_dataset_val]
  TRAIN: [my_dataset_train]
constants:
  imagenet_bgr256_mean: [103.53, 116.28, 123.675]
  imagenet_bgr256_std: [1.0, 1.0, 1.0]
  imagenet_rgb256_mean: [123.675, 116.28, 103.53]
  imagenet_rgb256_std: [58.395, 57.12, 57.375]
model:
  _target_: detectron2.modeling.GeneralizedRCNN
  backbone:
    _target_: detectron2.modeling.SimpleFeaturePyramid
    in_feature: ${.net.out_feature}
    net:
      _target_: detectron2.modeling.ViT
      depth: 12
      drop_path_rate: 0.1
      embed_dim: 768
      img_size: 1024
      mlp_ratio: 4
      norm_layer: !!python/object/apply:functools.partial
        args: [&id001 !!python/name:torch.nn.modules.normalization.LayerNorm '']
        state: !!python/tuple
        - *id001
        - !!python/tuple []
        - {eps: 1.0e-06}
        - null
      num_heads: 12
      out_feature: last_feat
      patch_size: 16
      qkv_bias: true
      residual_block_indexes: []
      use_rel_pos: true
      window_block_indexes: [0, 1, 3, 4, 6, 7, 9, 10]
      window_size: 14
    norm: LN
    out_channels: 256
    scale_factors: [4.0, 2.0, 1.0, 0.5]
    square_pad: 1024
    top_block: {_target_: detectron2.modeling.backbone.fpn.LastLevelMaxPool}
  input_format: RGB
  pixel_mean: [123.675, 116.28, 103.53]
  pixel_std: [58.395, 57.12, 57.375]
  proposal_generator:
    _target_: detectron2.modeling.proposal_generator.RPN
    anchor_generator:
      _target_: detectron2.modeling.anchor_generator.DefaultAnchorGenerator
      aspect_ratios: [0.5, 1.0, 2.0]
      offset: 0.0
      sizes:
      - [32]
      - [64]
      - [128]
      - [256]
      - [512]
      strides: [4, 8, 16, 32, 64]
    anchor_matcher:
      _target_: detectron2.modeling.matcher.Matcher
      allow_low_quality_matches: true
      labels: [0, -1, 1]
      thresholds: [0.3, 0.7]
    batch_size_per_image: 256
    box2box_transform:
      _target_: detectron2.modeling.box_regression.Box2BoxTransform
      weights: [1.0, 1.0, 1.0, 1.0]
    head:
      _target_: detectron2.modeling.proposal_generator.StandardRPNHead
      conv_dims: [-1, -1]
      in_channels: 256
      num_anchors: 3
    in_features: [p2, p3, p4, p5, p6]
    nms_thresh: 0.7
    positive_fraction: 0.5
    post_nms_topk: [1000, 1000]
    pre_nms_topk: [2000, 1000]
  roi_heads:
    _target_: detectron2.modeling.StandardROIHeads
    batch_size_per_image: 512
    box_head:
      _target_: detectron2.modeling.roi_heads.FastRCNNConvFCHead
      conv_dims: [256, 256, 256, 256]
      conv_norm: LN
      fc_dims: [1024]
      input_shape: !!python/object:detectron2.layers.shape_spec.ShapeSpec {channels: 256, height: 7, stride: null, width: 7}
    box_in_features: [p2, p3, p4, p5]
    box_pooler:
      _target_: detectron2.modeling.poolers.ROIPooler
      output_size: 7
      pooler_type: ROIAlignV2
      sampling_ratio: 0
      scales: [0.25, 0.125, 0.0625, 0.03125]
    box_predictor:
      _target_: detectron2.modeling.FastRCNNOutputLayers
      box2box_transform:
        _target_: detectron2.modeling.box_regression.Box2BoxTransform
        weights: [10, 10, 5, 5]
      input_shape: !!python/object:detectron2.layers.shape_spec.ShapeSpec {channels: 1024, height: null, stride: null, width: null}
      num_classes: ${..num_classes}
      test_score_thresh: 0.05
    mask_head:
      _target_: detectron2.modeling.roi_heads.MaskRCNNConvUpsampleHead
      conv_dims: [256, 256, 256, 256, 256]
      conv_norm: LN
      input_shape: !!python/object:detectron2.layers.shape_spec.ShapeSpec {channels: 256, height: 14, stride: null, width: 14}
      num_classes: ${..num_classes}
    mask_in_features: [p2, p3, p4, p5]
    mask_pooler:
      _target_: detectron2.modeling.poolers.ROIPooler
      output_size: 14
      pooler_type: ROIAlignV2
      sampling_ratio: 0
      scales: [0.25, 0.125, 0.0625, 0.03125]
    num_classes: 80
    positive_fraction: 0.25
    proposal_matcher:
      _target_: detectron2.modeling.matcher.Matcher
      allow_low_quality_matches: false
      labels: [0, 1]
      thresholds: [0.5]
train:
  amp: {enabled: false}
  checkpointer: {max_to_keep: 100, period: 5000}
  ddp: {broadcast_buffers: false, find_unused_parameters: false, fp16_compression: false}
  device: cuda
  eval_period: 5000
  init_checkpoint: ''
  log_period: 20
  max_iter: 90000
  output_dir: ./output

AdamW:
  _target_: torch.optim.AdamW
  betas: [0.9, 0.999]
  lr: 0.0001
  params: {_target_: detectron2.solver.get_default_optimizer_params, base_lr: '${..lr}', weight_decay_norm: 0.0}
  weight_decay: 0.1
SGD:
  _target_: torch.optim.SGD
  lr: 0.02
  momentum: 0.9
  params: {_target_: detectron2.solver.get_default_optimizer_params, weight_decay_norm: 0.0}
  weight_decay: 0.0001

